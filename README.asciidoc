twilio-sample
=============

== quick start with twiliofaces

. what do you could know after reading that:
- how to read the twiml generated from Faces Servlet (using cdi events)
- how to generate twiml using jsf tags 
- how to use a CDI component with @twilioscope
  
. prerequisites:

- have a public web server (for example: openshift jboss7)
- have a twilio number (also free account it's sufficent)
[remember to copy from twilio dashboard your ACCOUNT SID, your AUTH TOKEN, your TWILIO NUMBER]
  
. purpose of this tutorial:
 
- we want generate a simple quiz developed in 3 step:
- first step  - the caller must be declare his name and surname
- second step - the user should answer a question
- third step - we read if the user chosed a correct response

= declare on twilio dashboard

. You must go on the twilio dashboard and you must declare:
- *Voice Request URL* 
- *Status Callback URL*

*Voice Request URL* 
This is the address where your app should be avalaible (somethink like http://test.twiliofaces.org/sample/twiml/first.twiml). 
(yes the extension is .twiml --> twiliofaces in the web fragment declare a Faces Servlet to parse .tmiml files like jsf files,
and enable a filter to trace the xml produced and you can receive in cdi events. 
you will see in the follows like @observes these events).
Twilio retrieve and execute the TwiML via the selected HTTP method when this number receives a phone call 
(You can receive the twilio parameters on POST or GET - in jsf is the same!).
This is the entry point in your sample twilio app. 

*Status Callback URL*
When you use twiliofaces, this is automatically exposed at that url:  http://xxx.org/app-name/notification.jsf
Twiliofaces contains a web-fragment which declare that jsf page. Twilio make a request to this URL when a call to 
your phone number is completed.
Twiliofaces use that jsf page to register the end of call (and conseguently to destroy the twilioscoped component linked)

= create a maven web project

To use twiliofaces you need to declare some dependencies:

. twilio sdk
. javaee-api

Below a minimal pom.xml:

----

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.twiliofaces.test</groupId>
	<artifactId>sample</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<dependencies>
		<!-- twilio sdk -->
		<dependency>
			<groupId>com.twilio.sdk</groupId>
			<artifactId>twilio-java-sdk</artifactId>
			<version>3.3.10</version>
			<scope>compile</scope>
		</dependency>

		<!-- twilio faces -->
		<dependency>
			<groupId>org.twiliofaces</groupId>
			<artifactId>twiliofaces</artifactId>
			<version>1.2.4-SNAPSHOT</version>
			<scope>compile</scope>
		</dependency>
		<!-- java ee api -->
		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-api</artifactId>
			<version>6.0</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>
</project>

----
Declaring the javaee-api dependency you can use CDI @Inject and all CDI scope declarations like @RequestScope.
In twiliofaces we have a CDI extension to use @TwilioScope, a custom scope build for trace a complete twilio interaction
identified with a CallSid parameter. Also you have for free a lot of methods annotated with @Produces to simplify the
injection of all request parameters.

Below a minimal web.xml, where you should declare you twilio secret parameters:

. TWILIO SID
. TWILIO TOKEN
. TWILIO NUMBER
. TWILIO APPLICATION SID

----

<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

	<context-param>
		<param-name>TWILIO_SID</param-name>
		<param-value>XXXX</param-value>
	</context-param>


	<context-param>
		<param-name>TWILIO_TOKEN</param-name>
		<param-value>XXXX</param-value>
	</context-param>

	<context-param>
		<param-name>TWILIO_NUMBER</param-name>
		<param-value>XXXX</param-value>
	</context-param>
	<context-param>
		<param-name>APPLICATION_SID</param-name>
		<param-value>XXXX</param-value>
	</context-param>

</web-app>

----
In case of you use twilio api only to receive phone calls, you can't declare these parameters. But if you want start a call
from your app, you must have those. In this tutorial we don't use this capability, but it's important knows where store 
these reserved informations. 

Below an almost empty beans.xml (to start CDI container):

----

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="
      http://java.sun.com/xml/ns/javaee 
      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
</beans>


----


== CDI controllers to play with our Quiz!

We use a simple class "LogController"  where receives all events lied to the twiml production:
using @observes TwimlEvent, you can read/log the xml served to twilio to guide the flow of call.
The operation of sniff the xml producted is mandatary when you want observe/debug the twilio behavior.
In the same controller we inject a TwilioRequestMap: that map collect all parameters from twilio:
alternatively you can inject the parameters you need:
for example 
- @AccountSid, 
- @ApiVersion, 
- @ApplicationSid, 
- @CallSid, 
- @CallStatus, 
- @Caller, 
- @Direction, 
- @From, 
- @PhoneNumber 

For a complete list go to http://www.twiliofaces.org/howto.html#injectParameters.
In all cases you must remeber 2 things:
- if you @inject a parameter in a controller with life-cycle more long than Request, the valorization of that became 
at creation of component
- if you use a component with life more longer than RequestScope and you want always the fresh value injected you can use
Instance<String> xxx (where xx is from or direction or what do you need).

----

/*
 * Copyright 2013 twiliofaces.org.
 *
 * Licensed under the Eclipse Public License version 1.0, available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
/*
 * Copyright 2013 twiliofaces.org.
 *
 * Licensed under the Eclipse Public License version 1.0, available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.twiliofaces.test.sample.controller;

import java.util.logging.Logger;

import javax.enterprise.context.RequestScoped;
import javax.enterprise.event.Observes;
import javax.inject.Inject;
import javax.inject.Named;

import org.twiliofaces.annotations.TwilioRequestParams;
import org.twiliofaces.api.event.TwimlEvent;
import org.twiliofaces.request.pojo.TwilioRequestMap;

@Named
@RequestScoped
public class LogController
{

   Logger logger = Logger.getLogger(LogController.class.getName());

   @Inject
   @TwilioRequestParams
   TwilioRequestMap twilioRequestMap;

   public void creditPayment(@Observes TwimlEvent event)
   {
      logger.info(event.getTwimlFormatted());

   }

   public void log()
   {
      logger.info(twilioRequestMap.toString());
   }
}


----

The most important component in the Quiz app is the QuizController which born after tha twilio call our server and die 
after receiving a notification. We use twilioScope to follows the call in all steps of quiz:
- initial identification of client
- ask a question
- gather a reponse with numbers
- decide if the user wins, playing the recorded message on the twilio server and reading our sentence.

----

/*
 * Copyright 2013 twiliofaces.org.
 *
 * Licensed under the Eclipse Public License version 1.0, available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
/*
 * Copyright 2013 twiliofaces.org.
 *
 * Licensed under the Eclipse Public License version 1.0, available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.twiliofaces.test.sample.controller;

import java.io.Serializable;
import java.util.Date;
import java.util.logging.Logger;

import javax.enterprise.inject.Instance;
import javax.inject.Inject;
import javax.inject.Named;

import org.twiliofaces.annotations.notification.CallSid;
import org.twiliofaces.annotations.notification.Digits;
import org.twiliofaces.annotations.notification.From;
import org.twiliofaces.annotations.notification.RecordingUrl;
import org.twiliofaces.annotations.scope.TwilioScope;
import org.twiliofaces.test.sample.model.Caller;

@TwilioScope
@Named
public class QuizController implements Serializable
{

   private static final long serialVersionUID = 1L;

   Logger logger = Logger.getLogger(QuizController.class.getName());

   @Inject
   @CallSid
   String callSid;

   @Inject
   @From
   Instance<String> from;

   @Inject
   @RecordingUrl
   Instance<String> recordingUrl;

   @Inject
   @Digits
   Instance<String> digits;

   private Caller caller;

   int count = 0;

   public QuizController()
   {
   }

   public void first()
   {
      count++;
      logger.info("CALL SID: " + callSid + " count: " + count);
      logger.info("from number:" + from.get());
      this.caller = new Caller(from.get());
   }

   public void second()
   {
      count++;
      logger.info("CALL SID: " + callSid + " count: " + count);
      logger.info("recording url: " + recordingUrl.get());
      this.caller.setRecordingUrl(recordingUrl.get());
   }

   public void third()
   {
      count++;
      logger.info("CALL SID: " + callSid + " count: " + count);
      logger.info("digits: " + digits.get());
   }

   public String getIntro()
   {
      return "What's your name?";

   }

   public String getHangoutMessage()
   {
      return "Hey, you don't want play with me! Bye bye";
   }

   public String getQuestion()
   {
      return "What's the name of the italian capital? Click 1 for Rome, click 2 for Milan, click 3 for Venice.";

   }

   public String getResult()
   {
      if (digits != null && digits.get() != null && !digits.get().isEmpty() && digits.get().trim().equals("1"))
      {
         return "Awesome! your answer is correct";
      }
      return "Nooo! You must to go in Italy!! Rome is the italian capital!";

   }

   public Caller getCaller()
   {
      return caller;
   }

   public void setCaller(Caller caller)
   {
      this.caller = caller;
   }

}


----


== some jsf pages to generate twiml code

We need 3 twiml pages to generate all complete flux:

- first.twiml
- second.twiml
- third.twiml

The extension twiml is parsed from Faces Servlet declared on web-fragment of twiliofaces. We use a facelets tags to 
produce xml code, using jsf tags. Generally you use jsf technology to create your html pages, but with twilifaces 
you can create yuor twiml on the same way are you using to work in your java ee apps.
Some simple rules:

- declare an xml entry point
- use f:view tag to declare the xml namespaces of jsf tags and twilio tags
- respect twiml rules to neste the twiml verbs (if you want evaluate the correctness of your code you must use the some 
validator against XSD http://www.twiliofaces.org/howto.html#test)
- all actions in twiml code can use relative path, twilio resolve in right way
- use jsf f:event of type preRenderView to call your controllers

In our Quiz app, we have a first twiml page to request the name of the caller, record the user pronunciation, 
and associate these information for all twilio session.
The flow of quiz is that: 

- associate at numer of caller (inject using @From parameter)
- enrich the number information with a recorded mp3
- read the answer to our question and evaluate that
- read the final status of the caller (winning or losing)

For that flux, we need twilio verbs:

- say to read some text (text 2 speach)
- record to record the voice of our caller
- gather to store the answer to our question
- play to listen the recorder voice of caller

Below the three twilio pages. In all page we call QuizController to register the value of twilio parameters.

the first.xhtml code:
----

<?xml version="1.0" encoding="UTF-8"?>
<!-- ~ Copyright 2013 twiliofaces.org. ~ ~ Licensed under the Eclipse Public 
	License version 1.0, available at ~ http://www.eclipse.org/legal/epl-v10.html -->
<f:view xmlns="http://www.w3c.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:tf="http://twiliofaces.org/twiliofaces">
	<f:event type="preRenderView" listener="#{quizController.first}" />
	<tf:response>
		<tf:say value="#{quizController.intro}" voice="woman" language="en" />
		<tf:record action="second.twiml" method="POST" maxLength="8" />
		<tf:say value="#{quizController.hangoutMessage}" />
	</tf:response>
</f:view>

----

the second.twmil code:

----

<?xml version="1.0" encoding="UTF-8"?>
<!-- ~ Copyright 2013 twiliofaces.org. ~ ~ Licensed under the Eclipse Public 
	License version 1.0, available at ~ http://www.eclipse.org/legal/epl-v10.html -->
<f:view xmlns="http://www.w3c.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:tf="http://twiliofaces.org/twiliofaces">
	<f:event type="preRenderView" listener="#{quizController.second}" />
	<tf:response>
		<tf:gather action="third.twiml" method="POST" numDigits="1">
			<tf:say value="#{quizController.question}" voice="woman"
				language="en" />
		</tf:gather>
	</tf:response>
</f:view>

----

the third.twiml code:

----

<?xml version="1.0" encoding="UTF-8"?>
<!-- ~ Copyright 2013 twiliofaces.org. ~ ~ Licensed under the Eclipse Public 
	License version 1.0, available at ~ http://www.eclipse.org/legal/epl-v10.html -->
<f:view xmlns="http://www.w3c.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:tf="http://twiliofaces.org/twiliofaces">
	<f:event type="preRenderView" listener="#{quizController.third}" />
	<tf:response>
		<tf:say value="Dear" voice="woman" language="en" />
		<tf:play value="#{quizController.caller.recordingUrl}" />
		<tf:say value="This is the Quiz Result: #{quizController.result}"
			voice="woman" language="en" />
	</tf:response>
</f:view>

----

== Final considerations

This app is very simple, but in the same way you can create complex interactions.
We used 3 twiml pages, but we could use a simple page, which generate xml code using some simple hacks:

- in twilioscoped component we could register the phase (first, second, third) and in the only page, we could rendered
the block of code using somethig like that:

----

<?xml version="1.0" encoding="UTF-8"?>
<f:view xmlns="http://www.w3c.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:tf="http://twiliofaces.org/twiliofaces">
	<f:event type="preRenderView" listener="#{quizController.log}" />
	<c:choose>
		<c:when test="#{quizController.first}">
			<tf:response>
				<tf:say value="#{quizController.intro}" voice="woman" language="en" />
				<tf:record action="second.twiml" method="POST" maxLength="8" />
				<tf:say value="#{quizController.hangoutMessage}" />
			</tf:response>
		</c:when>
		<c:when test="#{quizController.second}">
			<tf:response>
				<tf:gather action="third.twiml" method="POST" numDigits="1">
					<tf:say value="#{quizController.question}" voice="woman" language="en" />
				</tf:gather>
			</tf:response>
		</c:when>
		<c:when test="#{quizController.third}">
			<ui:include src="third.xhtml" />
		</c:when>
	</c:choose>
</f:view>

----
 
 where third.xhtml should be something like:
 
----
 
 <ui:composition xmlns="http://www.w3c.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:tf="http://twiliofaces.org/twiliofaces">
	<f:event type="preRenderView" listener="#{quizController.third}" />
	<tf:response>
		<tf:say value="Dear" voice="woman" language="en" />
		<tf:play value="#{quizController.caller.recordingUrl}" />
		<tf:say value="This is the Quiz Result: #{quizController.result}"
			voice="woman" language="en" />
	</tf:response>
</ui:composition>

----
 
What are you thinking about? *ISN'T REALLY POWERFUL 'TWILIO FACES'!!!*
Remember: *TWILIOFACES is the flavour of TWILIO with the power of JAVA EE!!*
 
 
 
